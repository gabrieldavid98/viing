defmodule Viing.Packet.Connect.VariableHeaderTest do
  use ExUnit.Case, async: true

  alias Viing.Packet.Connect.VariableHeader

  describe "decode/1" do
    test "return {:ok, %Viing.Packet.Connect.VariableHeader{}, rest} if the packet is valid" do
      packet =
        <<0x00, 0x04, 0x4D, 0x51, 0x54, 0x54, 0x04, 0xC2, 0x00, 0x3C, 0x00, 0x11, 0x45, 0x6C,
          0x69, 0x78, 0x69, 0x72, 0x2E, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x57, 0x6F, 0x72, 0x6C,
          0x64, 0x00, 0x07, 0x67, 0x61, 0x62, 0x72, 0x69, 0x65, 0x6C, 0x00, 0x07, 0x31, 0x32,
          0x33, 0x34, 0x35, 0x36, 0x61>>

      assert {:ok,
              %Viing.Packet.Connect.VariableHeader{
                clean_session?: true,
                keep_alive: 60,
                password?: true,
                protocol: "MQTT",
                protocol_version: 4,
                user_name?: true,
                will?: false,
                will_qos?: 0,
                will_retain?: false
              },
              <<0, 17, 69, 108, 105, 120, 105, 114, 46, 72, 101, 108, 108, 111, 87, 111, 114, 108,
                100, 0, 7, 103, 97, 98, 114, 105, 101, 108, 0, 7, 49, 50, 51, 52, 53, 54,
                97>>} = VariableHeader.decode(packet)
    end

    test "return {:error, :unsupported_protocol_version_error} if the packet have unsuported protocol version" do
      packet =
        <<0x00, 0x04, 0x4D, 0x51, 0x54, 0x54, 0x03, 0xC2, 0x00, 0x3C, 0x00, 0x11, 0x45, 0x6C,
          0x69, 0x78, 0x69, 0x72, 0x2E, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x57, 0x6F, 0x72, 0x6C,
          0x64, 0x00, 0x07, 0x67, 0x61, 0x62, 0x72, 0x69, 0x65, 0x6C, 0x00, 0x07, 0x31, 0x32,
          0x33, 0x34, 0x35, 0x36, 0x61>>

      assert {:error, :unsupported_protocol_version_error} = VariableHeader.decode(packet)
    end

    test "return {:error, :malformed_packet_error} if the packet is variable header is malformed" do
      packet =
        <<0x00, 0x04, 0x4D, 0x51, 0x54, 0x4D, 0x04, 0xC2, 0x00, 0x3C, 0x00, 0x11, 0x45, 0x6C,
          0x69, 0x78, 0x69, 0x72, 0x2E, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x57, 0x6F, 0x72, 0x6C,
          0x64, 0x00, 0x07, 0x67, 0x61, 0x62, 0x72, 0x69, 0x65, 0x6C, 0x00, 0x07, 0x31, 0x32,
          0x33, 0x34, 0x35, 0x36, 0x61>>

      assert {:error, :malformed_packet_error} = VariableHeader.decode(packet)
    end
  end
end
